# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-05-16 22:04
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import world_languages.models
import re
import uuid


MACROAREAS = {
    'Africa': ['AF'],
    'Australia': ['OC'],
    'Eurasia': ['EU', 'AS'],
    'North America': ['NA'],
    'Papunesia': ['OC', 'AS'],
    'South America': ['SA'],
}


def add_macroareas(apps, schema_editor):
    Continent = apps.get_model('cities', 'Continent')
    Macroarea = apps.get_model('world_languages', 'Macroarea')

    for ma, cs in MACROAREAS.items():
        try:
            m = Macroarea.objects.get(name=ma)
        except Macroarea.DoesNotExist:
            m = Macroarea(name=ma)

        m.save()

        for c in cs:
            try:
                m.continents.get(code=c)
            except Continent.DoesNotExist:
                m.continents.add(Continent.objects.get(code=c))


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cities', '0002_continent_models_and_foreign_keys'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlternativeName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.CharField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator('^.+$', 'AlternativeName.slug cannot be blank')])),
                ('type', models.CharField(choices=[('name', 'Name'), ('abbr', 'Abbreviation')], max_length=4)),
                ('preferred', models.BooleanField(default=False)),
                ('colloquial', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='AlternativeScriptName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('name', 'Name'), ('abbr', 'Abbreviation'), ('link', 'Link')], default='name', max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='Characteristic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.CharField(max_length=1023)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DevelopmentNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordinal', models.IntegerField(default=None, null=True, verbose_name='L1, L2, L3, etc.')),
                ('note', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Dialect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('notes', models.TextField()),
                ('also_known_as', models.ManyToManyField(related_name='_dialect_also_known_as_+', to='world_languages.Dialect')),
            ],
        ),
        migrations.CreateModel(
            name='DialectNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.CharField(max_length=255, unique=True)),
                ('glottolog_id', models.CharField(blank=True, max_length=8, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-z]{4}\\d{4}$|^[a-z]\\d{2}[a-z]\\d{4}$', 32), "Glottolog IDs must be unique and of the form 'xxxx####' (except for the 'x##x####' one)")])),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='world_languages.Family')),
            ],
            options={
                'verbose_name_plural': 'families',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('name_gl', models.CharField(max_length=255)),
                ('slug', models.CharField(max_length=255, unique=True)),
                ('iso639_1', models.CharField(blank=True, max_length=2, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-z]{2}$', 32), 'ISO 639-1 IDs must be unique and two lowercase letters')])),
                ('iso639_2t', models.CharField(blank=True, max_length=3, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-z]{3}$', 32), 'ISO 639-2T IDs must be unique and three lowercase letters')])),
                ('iso639_2b', models.CharField(blank=True, max_length=3, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-z]{3}$', 32), 'ISO 639-2B IDs must be unique and three lowercase letters')])),
                ('iso639_3', models.CharField(blank=True, max_length=3, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-z]{3}$', 32), 'ISO 639-3 IDs must be unique')])),
                ('iso639_5', models.CharField(blank=True, default=None, max_length=3, null=True, validators=[django.core.validators.RegexValidator(re.compile('[a-z]{3}|', 32), 'ISO 639-5 IDs must be unique and three lowercase letters')])),
                ('iso639_2_type', models.CharField(choices=[('', 'Collective'), ('living', 'Living'), ('ancient', 'Ancient (extinct since ancient times)'), ('extinct', 'Extinct (extinct in recent times)'), ('historic', 'Historic (distinct from their modern form)'), ('constructed', 'Constructed (non-natural languages)')], db_column='type', default='living', max_length=11)),
                ('iso639_2_scope', models.CharField(choices=[('individual', 'Individual'), ('collective', 'Collection (do not precisely represent an individual language)'), ('macrolanguage', 'Macrolanguage'), ('local', 'Local (reserved for local use)'), ('special', 'Special')], default='individual', max_length=13)),
                ('glottolog_id', models.CharField(blank=True, max_length=8, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-z]{4}\\d{4}$|^[a-z]\\d{2}[a-z]\\d{4}$', 32), "Glottolog IDs must be unique and of the form 'xxxx####' (except for the 'x##x####' one)")])),
                ('development_status', models.PositiveIntegerField(blank=True, choices=[(0, 'Unattested'), (1, '1 (National)'), (2, '2 (Provincial)'), (3, '3 (Wider communication)'), (4, '4 (Educational)'), (5, '5 (Developing)'), (6, '6a (Vigorous)'), (7, '6b (Threatened)'), (8, '7 (Shifting)'), (9, '8a (Moribund)'), (10, '8b (Nearly extinct)'), (11, '8b (Reintroduced)'), (12, '9 (Second language only)'), (13, '9 (Dormant)'), (14, '10 (Extinct)')], null=True)),
                ('development_status_notes', models.TextField(blank=True, default='', null=True)),
                ('usage_notes', models.TextField(blank=True, default='', null=True)),
                ('population', models.PositiveIntegerField(blank=True, null=True)),
                ('lexical_similarity_notes', models.TextField(blank=True, default='')),
                ('notes', models.TextField(blank=True, default='')),
                ('family', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_languages', to='world_languages.Family')),
                ('iso_family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='collected_languages', to='world_languages.Language')),
            ],
        ),
        migrations.CreateModel(
            name='LexicalSimilarity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percent_low', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('percent_high', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('language_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='world_languages.Language')),
                ('language_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='world_languages.Language')),
            ],
        ),
        migrations.CreateModel(
            name='Macroarea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('continents', models.ManyToManyField(related_name='macroarea', to='cities.Continent')),
            ],
        ),
        migrations.CreateModel(
            name='Script',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(blank=True, choices=[('abjad', 'Abjad'), ('abugida', 'Abugida'), ('alphabet', 'Alphabet'), ('featural', 'Featural'), ('semisyllabary', 'Semi-syllabary'), ('syllabary', 'Syllabary'), ('logographic', 'Logographic'), ('semantophonetic', 'Semanto-phonetic'), ('pictographic', 'Pictographic'), ('ideogram', 'Ideogram'), ('numeral', 'Numeral'), ('other', 'Other')], default=None, max_length=15, null=True)),
                ('parent', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='world_languages.Script')),
            ],
        ),
        migrations.CreateModel(
            name='ScriptStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('script', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='world_languages.Script')),
            ],
        ),
        migrations.CreateModel(
            name='ScriptUsage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(blank=True, default=None, null=True)),
                ('start_accuracy', models.DateField(blank=True, default=None, null=True)),
                ('end', models.DateField(blank=True, default=None, null=True)),
                ('end_accuracy', models.DateField(blank=True, default=None, null=True)),
                ('primary', models.BooleanField(default=False)),
                ('minor', models.BooleanField(default=False)),
                ('in_use', models.BooleanField(default=True)),
                ('notes', models.TextField()),
                ('script', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usages', to='world_languages.Script')),
            ],
        ),
        migrations.CreateModel(
            name='ScriptUsageStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(default='')),
                ('script_style', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='world_languages.ScriptStyle')),
                ('script_usage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='world_languages.ScriptUsage')),
            ],
        ),
        migrations.CreateModel(
            name='UsedIn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('population', models.PositiveIntegerField(null=True)),
                ('as_of', models.DateField(default=django.utils.timezone.now)),
                ('development_status', models.PositiveIntegerField(choices=[(0, 'Unattested'), (1, '1 (National)'), (2, '2 (Provincial)'), (3, '3 (Wider communication)'), (4, '4 (Educational)'), (5, '5 (Developing)'), (6, '5 (Dispersed)'), (7, '6a (Vigorous)'), (8, '6b (Threatened)'), (9, '7 (Shifting)'), (10, '8a (Moribund)'), (11, '8b (Nearly extinct)'), (12, '8b (Reintroduced)'), (13, '9 (Second language only)'), (14, '9 (Dormant)'), (15, '10 (Extinct)')])),
                ('development_status_notes', models.TextField(blank=True, default='', null=True)),
                ('usage_notes', models.TextField(blank=True, default='', null=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cities.Country')),
                ('known_as', models.ManyToManyField(related_name='used_in', to='world_languages.AlternativeName')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='world_languages.Language')),
                ('scripts', models.ManyToManyField(related_name='used_in', to='world_languages.ScriptUsage')),
            ],
        ),
        migrations.CreateModel(
            name='AbsoluteWordTypeOrder',
            fields=[
                ('characteristic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='world_languages.Characteristic')),
                ('word_type', models.CharField(choices=[('adjective', 'adjective'), ('article', 'article'), ('attributive', 'attributive'), ('classifier', 'classifier'), ('demonstrative', 'demonstrative'), ('genitive', 'genitive'), ('modifier', 'modifier'), ('noun', 'noun'), ('noun_class', 'noun class'), ('noun_head', 'noun head'), ('number', 'number'), ('num_cls_cnstr', 'number classifier construction'), ('numeral', 'numeral'), ('personal_pronoun', 'personal pronoun'), ('possessive', 'possessive'), ('possessor', 'possessor'), ('poss_noun_phrase', 'possessor noun phrase'), ('postposition', 'postposition'), ('preposition', 'preposition'), ('proper_noun', 'proper noun'), ('question_word', 'question word'), ('q_word_phrase', 'question words phrase'), ('relative', 'relative'), ('relative_clause', 'relative clause')], max_length=16)),
                ('modifier', models.CharField(blank=True, choices=[('all', 'all'), ('both', 'both'), ('generally', 'generally'), ('mostly', 'mostly'), ('normally', 'normally'), ('not', 'not'), ('tend_to', 'tend to'), ('usually', 'usually')], default=None, max_length=9, null=True)),
                ('position', models.CharField(max_length=18)),
            ],
            options={
                'abstract': False,
            },
            bases=('world_languages.characteristic', models.Model),
        ),
        migrations.CreateModel(
            name='DevelopmentNoteBible',
            fields=[
                ('developmentnote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='world_languages.DevelopmentNote')),
                ('part', models.CharField(choices=[('all', 'Complete'), ('part', 'Portions'), ('old', 'Old Testament'), ('new', 'New Testament')], default='all', max_length=4)),
                ('start', models.DateField(default=None, null=True)),
                ('end', models.DateField(default=None, null=True)),
            ],
            bases=('world_languages.developmentnote',),
        ),
        migrations.CreateModel(
            name='DevelopmentNoteLiteracy',
            fields=[
                ('developmentnote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='world_languages.DevelopmentNote')),
                ('type', models.CharField(choices=[('read', 'Read'), ('write', 'Write')], max_length=5)),
                ('low', models.IntegerField()),
                ('high', models.IntegerField()),
            ],
            bases=('world_languages.developmentnote',),
        ),
        migrations.CreateModel(
            name='DevelopmentNoteLiteracyPercent',
            fields=[
                ('developmentnote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='world_languages.DevelopmentNote')),
                ('low', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('high', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
            bases=('world_languages.developmentnote',),
        ),
        migrations.CreateModel(
            name='DevelopmentNoteLiteracyTag',
            fields=[
                ('developmentnote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='world_languages.DevelopmentNote')),
                ('name', models.CharField(max_length=255, validators=[world_languages.models.validate_development_note_literacy_tag])),
            ],
            bases=('world_languages.developmentnote',),
        ),
        migrations.CreateModel(
            name='DevelopmentNoteTag',
            fields=[
                ('developmentnote_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='world_languages.DevelopmentNote')),
                ('name', models.CharField(max_length=255, validators=[world_languages.models.validate_development_note_tag])),
            ],
            bases=('world_languages.developmentnote',),
        ),
        migrations.CreateModel(
            name='RelativeWordTypeOrder',
            fields=[
                ('characteristic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='world_languages.Characteristic')),
                ('word_type', models.CharField(choices=[('adjective', 'adjective'), ('article', 'article'), ('attributive', 'attributive'), ('classifier', 'classifier'), ('demonstrative', 'demonstrative'), ('genitive', 'genitive'), ('modifier', 'modifier'), ('noun', 'noun'), ('noun_class', 'noun class'), ('noun_head', 'noun head'), ('number', 'number'), ('num_cls_cnstr', 'number classifier construction'), ('numeral', 'numeral'), ('personal_pronoun', 'personal pronoun'), ('possessive', 'possessive'), ('possessor', 'possessor'), ('poss_noun_phrase', 'possessor noun phrase'), ('postposition', 'postposition'), ('preposition', 'preposition'), ('proper_noun', 'proper noun'), ('question_word', 'question word'), ('q_word_phrase', 'question words phrase'), ('relative', 'relative'), ('relative_clause', 'relative clause')], max_length=16)),
                ('modifier', models.CharField(blank=True, choices=[('all', 'all'), ('both', 'both'), ('generally', 'generally'), ('mostly', 'mostly'), ('normally', 'normally'), ('not', 'not'), ('tend_to', 'tend to'), ('usually', 'usually')], default=None, max_length=9, null=True)),
                ('position', models.CharField(max_length=18)),
                ('related_word_type', models.CharField(choices=[('adjective', 'adjective'), ('article', 'article'), ('attributive', 'attributive'), ('classifier', 'classifier'), ('demonstrative', 'demonstrative'), ('genitive', 'genitive'), ('modifier', 'modifier'), ('noun', 'noun'), ('noun_class', 'noun class'), ('noun_head', 'noun head'), ('number', 'number'), ('num_cls_cnstr', 'number classifier construction'), ('numeral', 'numeral'), ('personal_pronoun', 'personal pronoun'), ('possessive', 'possessive'), ('possessor', 'possessor'), ('poss_noun_phrase', 'possessor noun phrase'), ('postposition', 'postposition'), ('preposition', 'preposition'), ('proper_noun', 'proper noun'), ('question_word', 'question word'), ('q_word_phrase', 'question words phrase'), ('relative', 'relative'), ('relative_clause', 'relative clause')], max_length=16)),
            ],
            options={
                'abstract': False,
            },
            bases=('world_languages.characteristic', models.Model),
        ),
        migrations.CreateModel(
            name='SpeechSoundCount',
            fields=[
                ('characteristic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='world_languages.Characteristic')),
                ('number', models.IntegerField()),
                ('modifier', models.CharField(choices=[('basic', 'Basic'), ('long', 'Long'), ('short', 'Short'), ('simple', 'Simple'), ('unique', 'Unique')], max_length=6)),
                ('type', models.CharField(choices=[('consonant', 'Consonant'), ('consonant_phoneme', 'Consonant Phoneme'), ('diphthong', 'Diphthong'), ('monophthong', 'Monophthong'), ('quality', 'Quality'), ('vowel', 'Vowel'), ('vowel_phoneme', 'Vowel Phoneme')], max_length=17)),
            ],
            options={
                'abstract': False,
            },
            bases=('world_languages.characteristic',),
        ),
        migrations.CreateModel(
            name='SubjectVerbObjectOrder',
            fields=[
                ('characteristic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='world_languages.Characteristic')),
                ('order', models.CharField(choices=[('SV', 'Subject-Verb'), ('VO', 'Verb-Object'), ('VS', 'Verb-Subject'), ('VV', 'Verb-Verb'), ('OSV', 'Object-Subject-Verb'), ('OVS', 'Object-Verb-Subject'), ('SOV', 'Subject-Object-Verb'), ('SVO', 'Subject-Verb-Object'), ('VOS', 'Verb-Object-Subject'), ('VSO', 'Verb-Subject-Object')], max_length=3)),
            ],
            options={
                'abstract': False,
            },
            bases=('world_languages.characteristic',),
        ),
        migrations.CreateModel(
            name='SyllablePattern',
            fields=[
                ('characteristic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='world_languages.Characteristic')),
                ('pattern', models.CharField(max_length=31)),
            ],
            options={
                'abstract': False,
            },
            bases=('world_languages.characteristic',),
        ),
        migrations.AddField(
            model_name='scriptusage',
            name='script_styles',
            field=models.ManyToManyField(related_name='usages', through='world_languages.ScriptUsageStyle', to='world_languages.ScriptStyle'),
        ),
        migrations.AddField(
            model_name='language',
            name='macroarea',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='languages', to='world_languages.Macroarea'),
        ),
        migrations.AddField(
            model_name='language',
            name='macrolanguage',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='languages', to='world_languages.Language'),
        ),
        migrations.AddField(
            model_name='language',
            name='similar_languages',
            field=models.ManyToManyField(through='world_languages.LexicalSimilarity', to='world_languages.Language'),
        ),
        migrations.AddField(
            model_name='language',
            name='used_in',
            field=models.ManyToManyField(related_name='languages', through='world_languages.UsedIn', to='cities.Country'),
        ),
        migrations.AddField(
            model_name='dialectnote',
            name='language',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='world_languages.Language'),
        ),
        migrations.AddField(
            model_name='dialectnote',
            name='used_in',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dialect_notes', to='world_languages.UsedIn'),
        ),
        migrations.AddField(
            model_name='dialect',
            name='used_in',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dialects', to='world_languages.UsedIn'),
        ),
        migrations.AddField(
            model_name='developmentnote',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='development_notes', to='world_languages.Language'),
        ),
        migrations.AddField(
            model_name='developmentnote',
            name='other_languages',
            field=models.ManyToManyField(related_name='_developmentnote_other_languages_+', to='world_languages.Language'),
        ),
        migrations.AddField(
            model_name='characteristic',
            name='languages',
            field=models.ManyToManyField(related_name='characteristics', to='world_languages.Language'),
        ),
        migrations.AddField(
            model_name='characteristic',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_languages.characteristic_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='alternativescriptname',
            name='script',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alternative_names', to='world_languages.Script'),
        ),
        migrations.AddField(
            model_name='alternativename',
            name='in_language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='world_languages.Language'),
        ),
        migrations.AddField(
            model_name='alternativename',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alternative_names', to='world_languages.Language'),
        ),
        migrations.AlterUniqueTogether(
            name='usedin',
            unique_together=set([('country', 'language')]),
        ),
        migrations.AlterUniqueTogether(
            name='language',
            unique_together=set([('glottolog_id', 'family')]),
        ),
        migrations.AlterUniqueTogether(
            name='dialect',
            unique_together=set([('used_in', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='developmentnote',
            unique_together=set([('language', 'note')]),
        ),
        migrations.AlterUniqueTogether(
            name='alternativename',
            unique_together=set([('language', 'name', 'type', 'in_language')]),
        ),
        migrations.RunSQL(
            """
            CREATE UNIQUE INDEX world_languages_family_name_unique ON word_languages_family (UPPER(name));
            """,
            """
            DROP INDEX world_languages_family_name_unique;
            """
        ),
        migrations.RunPython(add_macroareas, lambda apps, schema_editor: _),
    ]
